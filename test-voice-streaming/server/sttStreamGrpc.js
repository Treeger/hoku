/**
 * STT Streaming —á–µ—Ä–µ–∑ gRPC (Yandex SpeechKit v3)
 * Real-time —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
 */

import grpc from '@grpc/grpc-js';
import { RecognizerClient } from '@yandex-cloud/nodejs-sdk/dist/generated/yandex/cloud/ai/stt/v3/stt_service.js';

export class STTStreamGrpc {
  constructor(iamTokenManager, folderId) {
    this.iamTokenManager = iamTokenManager;
    this.folderId = folderId;
    this.stt = null;
    this.recognizeStream = null;
    this.onPartial = null;
    this.onFinal = null;
    this.finalCalled = false; // –§–ª–∞–≥ —á—Ç–æ–±—ã onFinal –≤—ã–∑—ã–≤–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
  }

  async init() {
    // –°–æ–∑–¥–∞—ë–º SSL credentials –¥–ª—è gRPC
    const credentials = grpc.credentials.createSsl();

    // –°–æ–∑–¥–∞—ë–º gRPC –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ —á–µ—Ä–µ–∑ Session)
    this.stt = new RecognizerClient(
      'stt.api.cloud.yandex.net:443',
      credentials
    );

    console.log('‚úÖ STT gRPC –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  async startRecognition(onPartialResult, onFinalResult) {
    try {
      console.log('‚è±Ô∏è STT Streaming - –Ω–∞—á–∞–ª–æ');
      const start = Date.now();

      this.onPartial = onPartialResult;
      this.onFinal = onFinalResult;
      this.finalCalled = false; // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø—Ä–∏ –Ω–æ–≤–æ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π IAM —Ç–æ–∫–µ–Ω
      const iamToken = await this.iamTokenManager.getToken();

      // –°–æ–∑–¥–∞—ë–º metadata —Å IAM —Ç–æ–∫–µ–Ω–æ–º
      const metadata = new grpc.Metadata();
      metadata.set('authorization', `Bearer ${iamToken}`);

      // –°–æ–∑–¥–∞—ë–º bidirectional stream —Å metadata
      this.recognizeStream = this.stt.recognizeStreaming(metadata);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      this.recognizeStream.on('data', (response) => {
        if (response.partial) {
          // –ß–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤–æ –≤—Ä–µ–º—è –≥–æ–≤–æ—Ä–µ–Ω–∏—è)
          const text = response.partial.alternatives?.[0]?.text || '';
          if (text && this.onPartial) {
            console.log('üìù STT Partial:', text);
            this.onPartial(text);
          }
        } else if (response.final) {
          // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          const text = response.final.alternatives?.[0]?.text || '';
          const duration = Date.now() - start;

          console.log(`‚úÖ STT –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${duration}ms`);
          console.log(`üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: "${text}"`);

          // –í—ã–∑—ã–≤–∞–µ–º onFinal —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
          // (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ final —Å–æ–±—ã—Ç–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 200ms)
          if (this.onFinal && !this.finalCalled) {
            this.finalCalled = true;
            this.onFinal(text);

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ 200ms –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (continuous mode)
            setTimeout(() => {
              this.finalCalled = false;
              console.log('üîÑ STT –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é');
            }, 200);
          }
        }
      });

      this.recognizeStream.on('error', (err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ STT Stream:', err);
      });

      this.recognizeStream.on('end', () => {
        console.log('üîö STT Stream –∑–∞–≤–µ—Ä—à—ë–Ω');
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
      this.recognizeStream.write({
        sessionOptions: {
          recognitionModel: {
            model: 'general',
            audioFormat: {
              rawAudio: {
                audioEncoding: 'LINEAR16_PCM',
                sampleRateHertz: 16000,
                audioChannelCount: 1
              }
            },
            textNormalization: {
              textNormalization: 'TEXT_NORMALIZATION_ENABLED',
              profanityFilter: false,
              literatureText: false
            },
            languageRestriction: {
              restrictionType: 'WHITELIST',
              languageCode: ['ru-RU']
            },
            audioProcessingType: 'REAL_TIME'
          },
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ü–∞ —Ñ—Ä–∞–∑—ã (End of Utterance)
          eouClassifier: {
            defaultClassifier: {
              type: 'DEFAULT',
              maxPauseBetweenWordsHintMs: 700  // –ü–∞—É–∑–∞ 0.7 —Å–µ–∫ = –∫–æ–Ω–µ—Ü —Ñ—Ä–∞–∑—ã (–±—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è)
            }
          }
        }
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ STT:', error);
      throw error;
    }
  }

  addAudioChunk(audioData) {
    if (!this.recognizeStream) {
      console.warn('‚ö†Ô∏è STT Stream –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ chunk –≤ gRPC stream
    this.recognizeStream.write({
      chunk: {
        data: audioData
      }
    });
  }

  finalize() {
    if (this.recognizeStream) {
      // –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–µ—Ü –∞—É–¥–∏–æ
      this.recognizeStream.end();
      this.recognizeStream = null;
    }
  }

  reset() {
    this.finalize();
    this.onPartial = null;
    this.onFinal = null;
  }
}
