/**
 * TTS Streaming —á–µ—Ä–µ–∑ gRPC (Yandex SpeechKit v3)
 * Real-time —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
 */

import grpc from '@grpc/grpc-js';
import { SynthesizerClient } from '@yandex-cloud/nodejs-sdk/dist/generated/yandex/cloud/ai/tts/v3/tts_service.js';

export class TTSStreamGrpc {
  constructor(iamTokenManager, folderId) {
    this.iamTokenManager = iamTokenManager;
    this.folderId = folderId;
    this.tts = null;
  }

  async init() {
    // –°–æ–∑–¥–∞—ë–º SSL credentials –¥–ª—è gRPC
    const credentials = grpc.credentials.createSsl();

    // –°–æ–∑–¥–∞—ë–º gRPC –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ —á–µ—Ä–µ–∑ Session)
    this.tts = new SynthesizerClient(
      'tts.api.cloud.yandex.net:443',
      credentials
    );

    console.log('‚úÖ TTS gRPC –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  async synthesize(text, onChunk, onComplete) {
    try {
      console.log('‚è±Ô∏è TTS Streaming - –Ω–∞—á–∞–ª–æ');
      console.log(`üîä –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º: "${text}"`);
      const start = Date.now();

      let chunkCount = 0;
      let totalBytes = 0;

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π IAM —Ç–æ–∫–µ–Ω
      const iamToken = await this.iamTokenManager.getToken();

      // –°–æ–∑–¥–∞—ë–º metadata —Å IAM —Ç–æ–∫–µ–Ω–æ–º
      const metadata = new grpc.Metadata();
      metadata.set('authorization', `Bearer ${iamToken}`);

      // –°–æ–∑–¥–∞—ë–º streaming –∑–∞–ø—Ä–æ—Å —Å metadata
      const synthesizeStream = this.tts.utteranceSynthesis({
        model: '',  // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
        text: text,
        outputAudioSpec: {
          containerAudio: {
            containerAudioType: 2  // ContainerAudio_ContainerAudioType.OGG_OPUS = 2
          }
        },
        loudnessNormalizationType: 2,  // UtteranceSynthesisRequest_LoudnessNormalizationType.LUFS = 2
        unsafeMode: false,  // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
        hints: [
          {
            voice: 'alena'
          }
        ]
      }, metadata);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º incoming audio chunks
      synthesizeStream.on('data', (response) => {
        if (response.audioChunk && response.audioChunk.data) {
          chunkCount++;
          totalBytes += response.audioChunk.data.length;

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º chunk —á–µ—Ä–µ–∑ callback
          onChunk(response.audioChunk.data);
        }
      });

      synthesizeStream.on('end', () => {
        const duration = Date.now() - start;
        console.log(`‚úÖ TTS –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${duration}ms`);
        console.log(`üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ chunks: ${chunkCount}, –±–∞–π—Ç: ${totalBytes}`);

        onComplete();
      });

      synthesizeStream.on('error', (err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ TTS Stream:', err);
        onComplete();
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ TTS:', error);
      throw error;
    }
  }
}
