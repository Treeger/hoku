/**
 * STT Streaming —Å–µ—Ä–≤–∏—Å
 * TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ gRPC Streaming API –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
 * –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è REST API v1 —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π
 */

import axios from 'axios';
import { Buffer } from 'buffer';

export class STTStream {
  constructor(apiKey, folderId) {
    this.apiKey = apiKey;
    this.folderId = folderId;
    this.audioChunks = [];
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ chunk (Int16 PCM data)
  addChunk(chunk) {
    this.audioChunks.push(chunk);
  }

  // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–ø–∏—Å—å –∏ –ø–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  async finalize() {
    try {
      console.log('‚è±Ô∏è STT API - –Ω–∞—á–∞–ª–æ');
      const start = Date.now();

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ chunks –≤ –æ–¥–∏–Ω –±—É—Ñ–µ—Ä
      const totalLength = this.audioChunks.reduce((sum, chunk) => sum + chunk.length, 0);
      const audioBuffer = Buffer.concat(this.audioChunks, totalLength);

      console.log(`üì¶ –°–æ–±—Ä–∞–Ω–æ –∞—É–¥–∏–æ: ${audioBuffer.length} –±–∞–π—Ç`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ REST API v1 (–∫–∞–∫ OGG –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      // TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ gRPC streaming —Å LINEAR16 PCM
      const response = await axios.post(
        `https://stt.api.cloud.yandex.net/speech/v1/stt:recognize` +
        `?folderId=${this.folderId}&lang=ru-RU&format=lpcm&sampleRateHertz=16000`,
        audioBuffer,
        {
          headers: {
            'Authorization': `Api-Key ${this.apiKey}`,
            'Content-Type': 'audio/x-pcm;bit=16;rate=16000',
          },
          maxBodyLength: Infinity,
          maxContentLength: Infinity,
        }
      );

      const duration = Date.now() - start;
      const recognizedText = response.data.result || '';

      console.log(`‚úÖ STT –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${duration}ms`);
      console.log(`üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: "${recognizedText}"`);

      return recognizedText;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ STT:', error.response?.data || error.message);
      throw error;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞
  reset() {
    this.audioChunks = [];
  }
}
