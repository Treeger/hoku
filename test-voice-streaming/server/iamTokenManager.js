/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ IAM —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è Yandex Cloud
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JWT –∏–∑ service account key –∏ –æ–±–º–µ–Ω–∏–≤–∞–µ—Ç –Ω–∞ IAM token
 */

import jwt from 'jsonwebtoken';
import axios from 'axios';
import fs from 'fs/promises';

class IAMTokenManager {
  constructor(keyFilePath) {
    this.keyFilePath = keyFilePath;
    this.iamToken = null;
    this.tokenExpiresAt = null;
    this.serviceAccountKey = null;
  }

  async init() {
    // –ß–∏—Ç–∞–µ–º service account key –∏–∑ —Ñ–∞–π–ª–∞
    const keyContent = await fs.readFile(this.keyFilePath, 'utf-8');
    this.serviceAccountKey = JSON.parse(keyContent);

    console.log('‚úÖ Service Account Key –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('   ID:', this.serviceAccountKey.id);
    console.log('   Service Account ID:', this.serviceAccountKey.service_account_id);

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω
    await this.refreshToken();
  }

  async getToken() {
    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –∏–ª–∏ –º–µ–Ω—å—à–µ - –æ–±–Ω–æ–≤–ª—è–µ–º
    if (!this.iamToken || Date.now() >= this.tokenExpiresAt - 60000) {
      await this.refreshToken();
    }

    return this.iamToken;
  }

  async refreshToken() {
    try {
      console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ IAM —Ç–æ–∫–µ–Ω–∞...');

      // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT
      const now = Math.floor(Date.now() / 1000);
      const payload = {
        aud: 'https://iam.api.cloud.yandex.net/iam/v1/tokens',
        iss: this.serviceAccountKey.service_account_id,
        iat: now,
        exp: now + 3600 // JWT –∂–∏–≤—ë—Ç 1 —á–∞—Å
      };

      const jwtToken = jwt.sign(payload, this.serviceAccountKey.private_key, {
        algorithm: 'PS256',
        keyid: this.serviceAccountKey.id
      });

      // 2. –û–±–º–µ–Ω–∏–≤–∞–µ–º JWT –Ω–∞ IAM token
      const response = await axios.post(
        'https://iam.api.cloud.yandex.net/iam/v1/tokens',
        {
          jwt: jwtToken
        }
      );

      this.iamToken = response.data.iamToken;

      // IAM token –∂–∏–≤—ë—Ç ~12 —á–∞—Å–æ–≤, –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ 11 —á–∞—Å–æ–≤
      this.tokenExpiresAt = Date.now() + (11 * 60 * 60 * 1000);

      console.log('‚úÖ IAM —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');
      console.log('   –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑:', Math.floor((this.tokenExpiresAt - Date.now()) / 1000 / 60), '–º–∏–Ω—É—Ç');

      // –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      setTimeout(() => {
        this.refreshToken().catch(err => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è IAM —Ç–æ–∫–µ–Ω–∞:', err);
        });
      }, 11 * 60 * 60 * 1000);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IAM —Ç–æ–∫–µ–Ω–∞:', error.response?.data || error.message);
      throw error;
    }
  }
}

export default IAMTokenManager;
