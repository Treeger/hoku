/**
 * TTS Streaming —Å–µ—Ä–≤–∏—Å
 * TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ gRPC Streaming API –¥–ª—è chunked audio
 * –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è REST API v1 —Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –Ω–∞—Ä–µ–∑–∫–æ–π –Ω–∞ chunks
 */

import axios from 'axios';

export class TTSStream {
  constructor(apiKey, folderId) {
    this.apiKey = apiKey;
    this.folderId = folderId;
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—á—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º chunks —á–µ—Ä–µ–∑ callback
  async synthesize(text, onChunk, onComplete) {
    try {
      console.log('‚è±Ô∏è TTS API - –Ω–∞—á–∞–ª–æ');
      console.log(`üîä –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º: "${text}"`);
      const start = Date.now();

      const response = await axios.post(
        'https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize',
        null,
        {
          headers: {
            'Authorization': `Api-Key ${this.apiKey}`,
          },
          params: {
            text: text,
            lang: 'ru-RU',
            voice: 'alena',
            speed: 1.0,
            format: 'oggopus',
            folderId: this.folderId,
          },
          responseType: 'arraybuffer'
        }
      );

      const duration = Date.now() - start;
      console.log(`‚úÖ TTS –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${duration}ms`);

      const audioBuffer = Buffer.from(response.data);
      console.log(`üì¶ –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ: ${audioBuffer.length} –±–∞–π—Ç`);

      // –ù–∞—Ä–µ–∑–∞–µ–º –Ω–∞ chunks –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ streaming
      // TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π gRPC streaming
      const chunkSize = 4096;
      for (let i = 0; i < audioBuffer.length; i += chunkSize) {
        const chunk = audioBuffer.slice(i, Math.min(i + chunkSize, audioBuffer.length));
        await onChunk(chunk);
      }

      onComplete();

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ TTS:', error.response?.data || error.message);
      throw error;
    }
  }
}
