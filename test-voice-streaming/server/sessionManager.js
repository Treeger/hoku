/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –¥–∏–∞–ª–æ–≥–∞
 */

const sessions = new Map();

export function createSession(sessionId) {
  sessions.set(sessionId, {
    id: sessionId,
    conversationHistory: [],
    createdAt: Date.now()
  });
  console.log(`üìù –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: ${sessionId}`);
  return sessions.get(sessionId);
}

export function getSession(sessionId) {
  return sessions.get(sessionId);
}

export function addMessage(sessionId, role, text) {
  const session = sessions.get(sessionId);
  if (!session) return null;

  session.conversationHistory.push({ role, text });

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  if (session.conversationHistory.length > 10) {
    session.conversationHistory.splice(0, session.conversationHistory.length - 10);
  }

  return session;
}

export function getConversationHistory(sessionId) {
  const session = sessions.get(sessionId);
  return session ? session.conversationHistory : [];
}

export function deleteSession(sessionId) {
  console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è: ${sessionId}`);
  sessions.delete(sessionId);
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
setInterval(() => {
  const now = Date.now();
  const oneHour = 60 * 60 * 1000;

  for (const [sessionId, session] of sessions.entries()) {
    if (now - session.createdAt > oneHour) {
      deleteSession(sessionId);
    }
  }
}, 30 * 60 * 1000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
