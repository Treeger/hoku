/**
 * WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è streaming –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
 */

import express from 'express';
import { WebSocketServer } from 'ws';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import IAMTokenManager from './iamTokenManager.js';
import { STTStreamGrpc } from './sttStreamGrpc.js';
import { TTSStreamGrpc } from './ttsStreamGrpc.js';
import { getGPTResponse } from './gptService.js';
import {
  createSession,
  getSession,
  addMessage,
  getConversationHistory
} from './sessionManager.js';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3000;
const FOLDER_ID = process.env.FOLDER_ID;
const SERVICE_ACCOUNT_KEY_PATH = process.env.SERVICE_ACCOUNT_KEY_PATH || join(__dirname, 'service-account-key.json');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!FOLDER_ID) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω FOLDER_ID');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IAM Token Manager
let iamTokenManager;
try {
  iamTokenManager = new IAMTokenManager(SERVICE_ACCOUNT_KEY_PATH);
  await iamTokenManager.init();
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ IAM Token Manager:', error.message);
  console.error('   –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª service-account-key.json —Å–æ–∑–¥–∞–Ω');
  process.exit(1);
}

// –°—Ç–∞—Ç–∏–∫–∞ –∏–∑ build –ø–∞–ø–∫–∏ Vite
app.use(express.static(join(__dirname, '../client/dist')));

const server = app.listen(PORT, () => {
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
  console.log('üöÄ Streaming Voice Chat Server (gRPC)');
  console.log(`üì° WebSocket: ws://localhost:${PORT}`);
  console.log(`üåê HTTP: http://localhost:${PORT}`);
  console.log('üìÇ Folder ID:', FOLDER_ID ? '‚úÖ' : '‚ùå');
  console.log('üîê IAM Token:', iamTokenManager ? '‚úÖ' : '‚ùå');
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
});

// WebSocket —Å–µ—Ä–≤–µ—Ä
const wss = new WebSocketServer({ server });

wss.on('connection', (ws) => {
  console.log('üë§ –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');

  // VOXIMPLANT INTEGRATION NOTE:
  // –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Voximplant/Zadarma:
  // 1. –í–º–µ—Å—Ç–æ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ WebSocket –ø–æ–¥–∫–ª—é—á–∏—Ç—å Voximplant SDK
  // 2. –ü–æ–ª—É—á–∞—Ç—å –∞—É–¥–∏–æ stream –æ—Ç Voximplant (–æ–Ω–∏ –æ—Ç–¥–∞—é—Ç PCM 16kHz mono)
  // 3. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞—É–¥–∏–æ chunks —á–µ—Ä–µ–∑ sttStream.addAudioChunk()
  // 4. TTS chunks –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ Voximplant stream
  // –í—Å—è –ª–æ–≥–∏–∫–∞ STT‚ÜíGPT‚ÜíTTS —É–∂–µ –≥–æ—Ç–æ–≤–∞ –∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω–æ

  let sessionId = null;
  let sttStream = null;
  let ttsStream = null;
  let receivedChunksCounter = 0;
  let receivedBytesTotal = 0;
  let isTTSPlaying = false;  // –§–ª–∞–≥ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è STT —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ –≤—Ä–µ–º—è TTS

  // Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ STT streaming
  const startSTTStream = async () => {
    if (!sttStream || !sessionId) {
      console.warn('‚ö†Ô∏è STT Stream –∏–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –≥–æ—Ç–æ–≤—ã');
      return;
    }

    console.log('‚è±Ô∏è STT Streaming - –∑–∞–ø—É—Å–∫');
    receivedChunksCounter = 0;
    receivedBytesTotal = 0;

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å callbacks
    await sttStream.startRecognition(
      // Callback –¥–ª—è partial —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      (partialText) => {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º partial —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ –≤—Ä–µ–º—è TTS (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —ç—Ö–æ)
        if (isTTSPlaying) {
          return;
        }

        ws.send(JSON.stringify({
          type: 'stt_partial',
          text: partialText
        }));
      },
      // Callback –¥–ª—è final —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      async (finalText) => {
        console.log(`üì• –ò–¢–û–ì–û –ø–æ–ª—É—á–µ–Ω–æ: ${receivedChunksCounter} chunks, ${receivedBytesTotal} –±–∞–π—Ç`);

        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ –≤—Ä–µ–º—è TTS (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —ç—Ö–æ)
        if (isTTSPlaying) {
          console.log('‚è∏Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º STT —Ä–µ–∑—É–ª—å—Ç–∞—Ç (TTS –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è)');
          return;
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º —à—É–º: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö (< 5 chunks = ~0.5 —Å–µ–∫)
        if (receivedChunksCounter < 5) {
          console.log('‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö (—à—É–º/—ç—Ö–æ), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º...');
          // STT –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ continuous mode, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          return;
        }

        if (!finalText) {
          console.log('‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç STT, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º...');
          // STT –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ continuous mode, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        ws.send(JSON.stringify({
          type: 'stt_result',
          text: finalText
        }));

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        addMessage(sessionId, 'user', finalText);

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
        const conversationHistory = getConversationHistory(sessionId);
        const gptResponse = await getGPTResponse(
          conversationHistory,
          iamTokenManager,
          FOLDER_ID
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç GPT
        ws.send(JSON.stringify({
          type: 'gpt_response',
          text: gptResponse
        }));

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        addMessage(sessionId, 'assistant', gptResponse);

        // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ TTS —á—Ç–æ–±—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å STT —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —ç—Ö–æ)
        console.log('‚è∏Ô∏è –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è TTS - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º STT');
        isTTSPlaying = true;

        // –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å —á–µ—Ä–µ–∑ gRPC streaming
        await ttsStream.synthesize(
          gptResponse,
          // Callback –¥–ª—è –∫–∞–∂–¥–æ–≥–æ audio chunk
          (chunk) => {
            ws.send(JSON.stringify({
              type: 'tts_chunk',
              data: chunk.toString('base64')
            }));
          },
          // Callback –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
          () => {
            ws.send(JSON.stringify({
              type: 'tts_end'
            }));
            console.log('‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω');

            // ‚ñ∂Ô∏è –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ TTS –∏ –¥–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –¥–ª—è –∑–∞—Ç–∏—Ö–∞–Ω–∏—è —ç—Ö–∞
            setTimeout(() => {
              console.log('‚ñ∂Ô∏è TTS –∑–∞–≤–µ—Ä—à—ë–Ω - –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É STT');
              isTTSPlaying = false;
            }, 500);
          }
        );
      }
    );
  };

  ws.on('message', async (data) => {
    try {
      const message = JSON.parse(data);

      switch (message.type) {
        case 'init':
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
          sessionId = message.sessionId;
          createSession(sessionId);

          // –°–æ–∑–¥–∞—ë–º gRPC –∫–ª–∏–µ–Ω—Ç—ã
          sttStream = new STTStreamGrpc(iamTokenManager, FOLDER_ID);
          ttsStream = new TTSStreamGrpc(iamTokenManager, FOLDER_ID);

          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º gRPC —Å–µ—Å—Å–∏–∏
          await sttStream.init();
          await ttsStream.init();

          ws.send(JSON.stringify({
            type: 'init_success',
            sessionId: sessionId
          }));

          console.log(`üì± –°–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: ${sessionId}`);

          // –ó–∞–ø—É—Å–∫–∞–µ–º STT streaming —Å—Ä–∞–∑—É (continuous mode)
          await startSTTStream();

          break;

        case 'audio_chunk':
          // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ chunk (Int16 PCM –≤ base64)
          if (!sttStream) {
            console.error('‚ùå STT Stream –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
          }

          const audioData = Buffer.from(message.data, 'base64');
          receivedChunksCounter++;
          receivedBytesTotal += audioData.length;

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º chunk –≤ gRPC stream (stream —É–∂–µ –∑–∞–ø—É—â–µ–Ω)
          sttStream.addAudioChunk(audioData);

          if (receivedChunksCounter % 10 === 0) {
            console.log(`üì• –ü–æ–ª—É—á–µ–Ω–æ chunks: ${receivedChunksCounter}, –±–∞–π—Ç: ${receivedBytesTotal}`);
          }
          break;

        case 'audio_end':
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –≥–æ–≤–æ—Ä–∏—Ç—å (—Ç–æ–ª—å–∫–æ –¥–ª—è push-to-talk —Ä–µ–∂–∏–º–∞)
          console.log('üé§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –≥–æ–≤–æ—Ä–∏—Ç—å (manual finalize)');

          if (!sttStream) {
            console.warn('‚ö†Ô∏è STT Stream –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
          }

          // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º STT stream (final —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ callback)
          // –í continuous mode —Å eou_config —ç—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          sttStream.finalize();
          break;

        default:
          console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', message.type);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      ws.send(JSON.stringify({
        type: 'error',
        message: error.message
      }));
    }
  });

  ws.on('close', () => {
    console.log('üëã –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
  });

  ws.on('error', (error) => {
    console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
  });
});
