/**
 * –ó–∞—Ö–≤–∞—Ç RAW PCM –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ AudioWorklet/ScriptProcessor
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Float32 -> Int16 PCM –¥–ª—è Yandex API
 */

export class AudioCapture {
  constructor() {
    this.audioContext = null;
    this.stream = null;
    this.source = null;
    this.processor = null;
    this.analyser = null;
    this.isRecording = false;
    this.onChunk = null;
    this.chunkCounter = 0;
    this.totalBytes = 0;
    this.microphoneLabel = '';
    this.selectedDeviceId = null;
  }

  async init(deviceId = null) {
    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
      const constraints = {
        audio: {
          deviceId: deviceId ? { exact: deviceId } : undefined,
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true,
          sampleRate: 16000,  // Yandex —Ç—Ä–µ–±—É–µ—Ç 16kHz
          channelCount: 1     // Mono
        }
      };

      this.stream = await navigator.mediaDevices.getUserMedia(constraints);

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–µ
      const devices = await navigator.mediaDevices.enumerateDevices();
      const audioTrack = this.stream.getAudioTracks()[0];
      const settings = audioTrack.getSettings();
      this.selectedDeviceId = settings.deviceId;
      const device = devices.find(d => d.deviceId === settings.deviceId);
      this.microphoneLabel = device ? device.label : '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é';

      // –°–æ–∑–¥–∞—ë–º AudioContext
      this.audioContext = new (window.AudioContext || window.webkitAudioContext)({
        sampleRate: 16000
      });

      this.source = this.audioContext.createMediaStreamSource(this.stream);

      // –°–æ–∑–¥–∞—ë–º analyser –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞
      this.analyser = this.audioContext.createAnalyser();
      this.analyser.fftSize = 256;
      this.source.connect(this.analyser);

      console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
      console.log('üé§ AudioCapture –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      console.log('   –ú–∏–∫—Ä–æ—Ñ–æ–Ω:', this.microphoneLabel);
      console.log('   Sample rate:', this.audioContext.sampleRate, 'Hz');
      console.log('   ‚ö†Ô∏è  –í–ê–ñ–ù–û: Yandex —Ç—Ä–µ–±—É–µ—Ç 16000 Hz!');
      if (this.audioContext.sampleRate !== 16000) {
        console.warn('   ‚ö†Ô∏è  Sample rate –ù–ï 16000 Hz - –Ω—É–∂–µ–Ω resampling!');
      }
      console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AudioCapture:', error);
      throw error;
    }
  }

  start(onChunkCallback) {
    if (this.isRecording) return;

    this.onChunk = onChunkCallback;
    this.isRecording = true;
    this.chunkCounter = 0;
    this.totalBytes = 0;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ScriptProcessorNode (deprecated –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ)
    // TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ AudioWorklet –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const bufferSize = 4096;
    this.processor = this.audioContext.createScriptProcessor(bufferSize, 1, 1);

    this.processor.onaudioprocess = (event) => {
      if (!this.isRecording) return;

      // –ü–æ–ª—É—á–∞–µ–º Float32 PCM –¥–∞–Ω–Ω—ã–µ
      const float32Data = event.inputBuffer.getChannelData(0);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Float32 (-1.0 to 1.0) -> Int16 (-32768 to 32767)
      const int16Data = new Int16Array(float32Data.length);
      for (let i = 0; i < float32Data.length; i++) {
        const sample = Math.max(-1, Math.min(1, float32Data[i]));
        int16Data[i] = sample < 0 ? sample * 0x8000 : sample * 0x7FFF;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º chunk
      if (this.onChunk) {
        this.chunkCounter++;
        this.totalBytes += int16Data.buffer.byteLength;

        if (this.chunkCounter % 10 === 0) {
          console.log(`üìä Chunk #${this.chunkCounter}, —Ä–∞–∑–º–µ—Ä: ${int16Data.buffer.byteLength} –±–∞–π—Ç, –≤—Å–µ–≥–æ: ${this.totalBytes} –±–∞–π—Ç`);
        }

        this.onChunk(int16Data.buffer);
      }
    };

    this.source.connect(this.processor);
    this.processor.connect(this.audioContext.destination);

    console.log('üî¥ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å');
    console.log('   Buffer size:', bufferSize, 'samples');
    console.log('   Sample rate:', this.audioContext.sampleRate, 'Hz');
  }

  stop() {
    if (!this.isRecording) return;

    this.isRecording = false;

    if (this.processor) {
      this.processor.disconnect();
      this.source.disconnect(this.processor);
      this.processor = null;
    }

    console.log('‚è∏Ô∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    console.log(`üìä –ò–¢–û–ì–û: ${this.chunkCounter} chunks, ${this.totalBytes} –±–∞–π—Ç (${(this.totalBytes / 1024).toFixed(2)} KB)`);
  }

  getVolumeLevel() {
    if (!this.analyser) return 0;

    const bufferLength = this.analyser.frequencyBinCount;
    const dataArray = new Uint8Array(bufferLength);
    this.analyser.getByteFrequencyData(dataArray);

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
    let sum = 0;
    for (let i = 0; i < bufferLength; i++) {
      sum += dataArray[i];
    }
    const average = sum / bufferLength;
    return (average / 255) * 100; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç 0-100
  }

  getMicrophoneInfo() {
    return {
      label: this.microphoneLabel,
      sampleRate: this.audioContext ? this.audioContext.sampleRate : 0,
      deviceId: this.selectedDeviceId
    };
  }

  async reinit(deviceId) {
    console.log('üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:', deviceId);

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–º
    if (this.stream) {
      this.stream.getTracks().forEach(track => track.stop());
    }

    // –û—Ç–∫–ª—é—á–∞–µ–º analyser –µ—Å–ª–∏ –µ—Å—Ç—å
    if (this.analyser && this.source) {
      this.source.disconnect(this.analyser);
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º AudioContext
    if (this.audioContext) {
      await this.audioContext.close();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ —Å –Ω–æ–≤—ã–º deviceId
    await this.init(deviceId);

    console.log('‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  destroy() {
    this.stop();

    if (this.stream) {
      this.stream.getTracks().forEach(track => track.stop());
      this.stream = null;
    }

    if (this.audioContext) {
      this.audioContext.close();
      this.audioContext = null;
    }

    console.log('üóëÔ∏è AudioCapture —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
  }
}
