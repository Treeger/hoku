/**
 * Main entry point - —Å–≤—è–∑—ã–≤–∞–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏
 */

import { AudioCapture } from './audioCapture.js';
import { AudioPlayer } from './audioPlayer.js';
import { WSClient } from './wsClient.js';
import { ChatUI } from './ui.js';

class VoiceChat {
  constructor() {
    this.audioCapture = new AudioCapture();
    this.audioPlayer = new AudioPlayer();
    this.wsClient = new WSClient();
    this.ui = new ChatUI();
    this.isRecording = false;
    this.volumeInterval = null;
    this.mode = 'push-to-talk'; // 'push-to-talk' –∏–ª–∏ 'continuous'
  }

  async init() {
    try {
      this.ui.setStatus('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...', 'disconnected');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AudioCapture
      await this.audioCapture.init();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AudioPlayer
      await this.audioPlayer.init();

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
      await this.wsClient.connect();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      this.setupWSHandlers();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      this.setupUIHandlers();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤
      await this.loadMicrophones();

      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–µ
      const micInfo = this.audioCapture.getMicrophoneInfo();
      this.ui.setMicrophoneInfo(micInfo.label, micInfo.sampleRate);

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
      this.ui.onMicrophoneChange(async (deviceId) => {
        await this.changeMicrophone(deviceId);
      });

      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞
      this.startVolumeMonitoring();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
      this.setupModeSwitch();

      this.ui.setStatus('–ì–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é', 'connected');
      console.log('‚úÖ VoiceChat –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      this.ui.setStatus('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', 'disconnected');
      this.ui.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É.');
    }
  }

  setupWSHandlers() {
    this.wsClient.on('onConnect', () => {
      this.ui.setStatus('–ì–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é', 'connected');
    });

    this.wsClient.on('onDisconnect', () => {
      this.ui.setStatus('–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...', 'disconnected');
    });

    this.wsClient.on('onSTTPartial', (text) => {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º partial —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
      if (text) {
        this.ui.showPartialText(text);
        if (this.mode === 'continuous') {
          this.ui.setStatus('üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é... (Auto)', 'connected');
        }
      }
    });

    this.wsClient.on('onSTTResult', (text) => {
      this.ui.clearPartialText();
      this.ui.addUserMessage(text);
      this.ui.setStatus('ü§ñ –î—É–º–∞—é...', '');
    });

    this.wsClient.on('onGPTResponse', (text) => {
      this.ui.addAssistantMessage(text);
      this.ui.setStatus('üîä –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—á—å...', '');
    });

    this.wsClient.on('onTTSChunk', (base64Data) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º chunk (–Ω–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è)
      if (this.audioPlayer.audioChunks.length === 0) {
        this.ui.setStatus('üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...', '');
      }

      this.audioPlayer.addChunk(base64Data);
    });

    this.wsClient.on('onTTSEnd', async () => {
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É–∂–µ –Ω–∞—á–∞–ª–æ—Å—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º chunk (—Å–º. audioPlayer.addChunk)
      // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI

      // –í continuous mode –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å
      if (this.mode === 'continuous') {
        this.ui.setStatus('üé§ –°–ª—É—à–∞—é...', 'connected');
        this.ui.showPartialText('–ì–æ–≤–æ—Ä–∏—Ç–µ...');
      } else {
        this.ui.setStatus('–ì–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é', 'connected');
      }
    });

    this.wsClient.on('onError', (message) => {
      this.ui.showError(message);

      // –í continuous mode –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ª—É—à–∞–Ω–∏—é –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
      if (this.mode === 'continuous') {
        setTimeout(() => {
          this.ui.setStatus('üé§ –°–ª—É—à–∞—é... (Auto)', 'connected');
          this.ui.showPartialText('–ì–æ–≤–æ—Ä–∏—Ç–µ...');
        }, 2000);
      } else {
        this.ui.setStatus('–û—à–∏–±–∫–∞', 'disconnected');
      }
    });
  }

  setupUIHandlers() {
    const micButton = document.getElementById('micButton');

    // Desktop: mousedown/mouseup (—Ç–æ–ª—å–∫–æ –¥–ª—è push-to-talk)
    micButton.addEventListener('mousedown', (e) => {
      e.preventDefault();
      if (this.mode === 'push-to-talk') {
        this.startRecording();
      }
    });

    micButton.addEventListener('mouseup', (e) => {
      e.preventDefault();
      if (this.mode === 'push-to-talk') {
        this.stopRecording();
      }
    });

    micButton.addEventListener('mouseleave', () => {
      if (this.isRecording && this.mode === 'push-to-talk') {
        this.stopRecording();
      }
    });

    // Mobile: touchstart/touchend (—Ç–æ–ª—å–∫–æ –¥–ª—è push-to-talk)
    micButton.addEventListener('touchstart', (e) => {
      e.preventDefault();
      if (this.mode === 'push-to-talk') {
        this.startRecording();
      }
    });

    micButton.addEventListener('touchend', (e) => {
      e.preventDefault();
      if (this.mode === 'push-to-talk') {
        this.stopRecording();
      }
    });
  }

  setupModeSwitch() {
    const modeInputs = document.querySelectorAll('input[name="mode"]');
    const micButton = document.getElementById('micButton');

    modeInputs.forEach(input => {
      input.addEventListener('change', (e) => {
        this.mode = e.target.value;
        console.log('üîÑ –†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞:', this.mode);

        if (this.mode === 'continuous') {
          // Continuous mode - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
          micButton.style.opacity = '0.5';
          micButton.style.pointerEvents = 'none';

          const micText = micButton.querySelector('.mic-text');
          micText.textContent = '–†–µ–∂–∏–º Auto';

          this.startRecording();
        } else {
          // Push-to-talk mode - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
          micButton.style.opacity = '1';
          micButton.style.pointerEvents = 'auto';

          const micText = micButton.querySelector('.mic-text');
          micText.textContent = '–ù–∞–∂–º–∏ –∏ –≥–æ–≤–æ—Ä–∏';

          if (this.isRecording) {
            this.stopRecording();
          }
        }
      });
    });
  }

  startRecording() {
    if (this.isRecording) return;

    this.isRecording = true;
    this.ui.setRecordingState(true);

    if (this.mode === 'continuous') {
      this.ui.setStatus('üé§ –°–ª—É—à–∞—é... (Auto)', 'connected');
      this.ui.showPartialText('–ì–æ–≤–æ—Ä–∏—Ç–µ...');
    } else {
      this.ui.setStatus('üî¥ –°–ª—É—à–∞—é...', '');
      this.ui.showPartialText('–ì–æ–≤–æ—Ä–∏—Ç–µ...');
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞—Ö–≤–∞—Ç –∞—É–¥–∏–æ
    this.audioCapture.start((audioBuffer) => {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º chunk –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      this.wsClient.sendAudioChunk(audioBuffer);
    });

    console.log('üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å');
  }

  stopRecording() {
    if (!this.isRecording) return;

    this.isRecording = false;
    this.ui.setRecordingState(false);
    this.ui.setStatus('–û–±—Ä–∞–±–æ—Ç–∫–∞...', '');
    this.ui.clearPartialText();

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—Ö–≤–∞—Ç –∞—É–¥–∏–æ
    this.audioCapture.stop();

    // –í push-to-talk —Ä–µ–∂–∏–º–µ —Å–æ–æ–±—â–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –æ –∫–æ–Ω—Ü–µ –∑–∞–ø–∏—Å–∏
    // –í continuous —Ä–µ–∂–∏–º–µ VAD –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω–µ—Ü –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (this.mode === 'push-to-talk') {
      this.wsClient.sendAudioEnd();
    }

    console.log('‚è∏Ô∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }

  startVolumeMonitoring() {
    this.volumeInterval = setInterval(() => {
      const level = this.audioCapture.getVolumeLevel();
      this.ui.updateVolumeBar(level);
    }, 50); // –û–±–Ω–æ–≤–ª—è–µ–º 20 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
  }

  stopVolumeMonitoring() {
    if (this.volumeInterval) {
      clearInterval(this.volumeInterval);
      this.volumeInterval = null;
      this.ui.updateVolumeBar(0);
    }
  }

  async loadMicrophones() {
    try {
      const devices = await navigator.mediaDevices.enumerateDevices();
      const audioInputs = devices.filter(device => device.kind === 'audioinput');

      if (audioInputs.length === 0) {
        console.warn('‚ö†Ô∏è –ú–∏–∫—Ä–æ—Ñ–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      const micInfo = this.audioCapture.getMicrophoneInfo();
      this.ui.populateMicrophones(audioInputs, micInfo.deviceId);

      console.log('üéôÔ∏è –ù–∞–π–¥–µ–Ω–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤:', audioInputs.length);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤:', error);
    }
  }

  async changeMicrophone(deviceId) {
    try {
      console.log('üîÑ –°–º–µ–Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–∞ deviceId:', deviceId);
      this.ui.setStatus('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...', '');

      // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AudioCapture —Å –Ω–æ–≤—ã–º –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º
      await this.audioCapture.reinit(deviceId);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–µ
      const micInfo = this.audioCapture.getMicrophoneInfo();
      this.ui.setMicrophoneInfo(micInfo.label, micInfo.sampleRate);

      this.ui.setStatus('–ì–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é', 'connected');
      console.log('‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:', error);
      this.ui.setStatus('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞', 'disconnected');
      this.ui.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω');
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('DOMContentLoaded', async () => {
  const voiceChat = new VoiceChat();
  await voiceChat.init();
});
