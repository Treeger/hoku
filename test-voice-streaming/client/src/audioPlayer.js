/**
 * Streaming audio player
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ audio chunks –ø–æ –º–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω–∏—è
 */

export class AudioPlayer {
  constructor() {
    this.audioContext = null;
    this.audioChunks = [];
    this.isPlaying = false;
    this.sourceNode = null;
  }

  async init() {
    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
    console.log('üîä AudioPlayer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  async addChunk(base64Data) {
    try {
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
      const binaryString = atob(base64Data);
      const bytes = new Uint8Array(binaryString.length);
      for (let i = 0; i < binaryString.length; i++) {
        bytes[i] = binaryString.charCodeAt(i);
      }

      this.audioChunks.push(bytes.buffer);

      // üöÄ –í–ê–ñ–ù–û: –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º chunk
      // –ù–µ –∂–¥–µ–º tts_end - —ç—Ç–æ —Å–æ–∫—Ä–∞—â–∞–µ—Ç latency!
      if (this.audioChunks.length === 1 && !this.isPlaying) {
        console.log('üöÄ –ü–µ—Ä–≤—ã–π TTS chunk –ø–æ–ª—É—á–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ');
        this.play();
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è audio chunk:', error);
    }
  }

  async play() {
    if (this.audioChunks.length === 0) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç audio chunks –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
      return;
    }

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    if (this.isPlaying) {
      console.log('‚ö†Ô∏è –£–∂–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }

    try {
      this.isPlaying = true;

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ chunks
      const totalLength = this.audioChunks.reduce((sum, chunk) => sum + chunk.byteLength, 0);
      const combined = new Uint8Array(totalLength);
      let offset = 0;
      for (const chunk of this.audioChunks) {
        combined.set(new Uint8Array(chunk), offset);
        offset += chunk.byteLength;
      }

      // –°–æ–∑–¥–∞—ë–º blob –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
      const blob = new Blob([combined], { type: 'audio/ogg' });
      const arrayBuffer = await blob.arrayBuffer();
      const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);

      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
      this.sourceNode = this.audioContext.createBufferSource();
      this.sourceNode.buffer = audioBuffer;
      this.sourceNode.connect(this.audioContext.destination);

      this.sourceNode.onended = () => {
        this.isPlaying = false;
        this.audioChunks = [];
        console.log('‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      };

      this.sourceNode.start(0);
      console.log('üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
      this.isPlaying = false;
    }
  }

  stop() {
    if (this.sourceNode) {
      this.sourceNode.stop();
      this.sourceNode = null;
    }
    this.isPlaying = false;
    this.audioChunks = [];
  }

  reset() {
    this.stop();
    this.audioChunks = [];
  }
}
