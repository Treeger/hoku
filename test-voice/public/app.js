// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let mediaRecorder = null;
let audioChunks = [];
let stream = null;
let audioContext = null;
let analyser = null;
let volumeInterval = null;
let selectedDeviceId = null;

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const recordButton = document.getElementById('recordButton');
const statusDiv = document.getElementById('status');
const userTextDiv = document.getElementById('userText');
const aiTextDiv = document.getElementById('aiText');
const audioPlayer = document.getElementById('audioPlayer');
const microphoneSelect = document.getElementById('microphoneSelect');
const volumeBar = document.getElementById('volumeBar');

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
 */
function setStatus(message, type = '') {
    statusDiv.textContent = message;
    statusDiv.className = 'status ' + type;
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤
 */
async function loadAudioDevices() {
    try {
        const devices = await navigator.mediaDevices.enumerateDevices();
        const audioInputs = devices.filter(device => device.kind === 'audioinput');

        microphoneSelect.innerHTML = '';

        if (audioInputs.length === 0) {
            microphoneSelect.innerHTML = '<option value="">–ú–∏–∫—Ä–æ—Ñ–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</option>';
            return;
        }

        audioInputs.forEach((device, index) => {
            const option = document.createElement('option');
            option.value = device.deviceId;
            option.textContent = device.label || `–ú–∏–∫—Ä–æ—Ñ–æ–Ω ${index + 1}`;
            microphoneSelect.appendChild(option);
        });

        // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        selectedDeviceId = audioInputs[0].deviceId;
        console.log('üì± –ù–∞–π–¥–µ–Ω–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤:', audioInputs.length);
        console.log('üé§ –í—ã–±—Ä–∞–Ω:', audioInputs[0].label || '–ú–∏–∫—Ä–æ—Ñ–æ–Ω 1');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
        microphoneSelect.innerHTML = '<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</option>';
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
 */
microphoneSelect.addEventListener('change', async (e) => {
    selectedDeviceId = e.target.value;
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:', e.target.selectedOptions[0].text);

    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MediaRecorder —Å –Ω–æ–≤—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
    if (stream) {
        stream.getTracks().forEach(track => track.stop());
    }
    await initMediaRecorder();
});

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MediaRecorder
 */
async function initMediaRecorder() {
    try {
        const constraints = {
            audio: {
                deviceId: selectedDeviceId ? { exact: selectedDeviceId } : undefined,
                echoCancellation: true,
                noiseSuppression: true,
                autoGainControl: true,
                channelCount: 1  // Mono
            }
        };

        stream = await navigator.mediaDevices.getUserMedia(constraints);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AudioContext –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        if (!audioContext) {
            audioContext = new (window.AudioContext || window.webkitAudioContext)();
        }

        // –°–æ–∑–¥–∞—ë–º analyser –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞
        analyser = audioContext.createAnalyser();
        analyser.fftSize = 256;
        const source = audioContext.createMediaStreamSource(stream);
        source.connect(analyser);

        console.log('üéöÔ∏è AudioContext sample rate:', audioContext.sampleRate);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π MIME-—Ç–∏–ø
        const mimeType = MediaRecorder.isTypeSupported('audio/webm;codecs=opus')
            ? 'audio/webm;codecs=opus'
            : 'audio/webm';

        mediaRecorder = new MediaRecorder(stream, {
            mimeType: mimeType
        });

        mediaRecorder.ondataavailable = (event) => {
            if (event.data.size > 0) {
                audioChunks.push(event.data);
                console.log('üì¶ Chunk –ø–æ–ª—É—á–µ–Ω:', event.data.size, '–±–∞–π—Ç');
            }
        };

        mediaRecorder.onstop = async () => {
            stopVolumeMonitoring();
            await handleRecordingStop();
        };

        setStatus('–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏', 'success');
        console.log('‚úÖ MediaRecorder –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', mimeType);

        // –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞
        startVolumeMonitoring();

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:', error);
        setStatus('–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É', 'error');
    }
}

/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞
 */
function startVolumeMonitoring() {
    if (!analyser) return;

    const bufferLength = analyser.frequencyBinCount;
    const dataArray = new Uint8Array(bufferLength);

    volumeInterval = setInterval(() => {
        analyser.getByteFrequencyData(dataArray);

        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
        let sum = 0;
        for (let i = 0; i < bufferLength; i++) {
            sum += dataArray[i];
        }
        const average = sum / bufferLength;
        const percentage = (average / 255) * 100;

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        volumeBar.style.width = percentage + '%';
    }, 50);
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞
 */
function stopVolumeMonitoring() {
    if (volumeInterval) {
        clearInterval(volumeInterval);
        volumeInterval = null;
        volumeBar.style.width = '0%';
    }
}

/**
 * –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏
 */
function startRecording() {
    if (!mediaRecorder) {
        setStatus('–û—à–∏–±–∫–∞: –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'error');
        return;
    }

    audioChunks = [];
    mediaRecorder.start();
    setStatus('üî¥ –ó–∞–ø–∏—Å—å... –ì–æ–≤–æ—Ä–∏—Ç–µ!', 'recording');
    recordButton.classList.add('recording');
    console.log('üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å');
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏
 */
function stopRecording() {
    if (mediaRecorder && mediaRecorder.state === 'recording') {
        mediaRecorder.stop();
        setStatus('‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...', 'processing');
        recordButton.classList.remove('recording');
        console.log('‚è∏Ô∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 */
async function handleRecordingStop() {
    try {
        // –°–æ–∑–¥–∞—ë–º WebM blob
        const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
        console.log('üì¶ –†–∞–∑–º–µ—Ä –∑–∞–ø–∏—Å–∏ WebM:', audioBlob.size, '–±–∞–π—Ç');

        if (audioBlob.size < 1000) {
            setStatus('–û—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–ø–∏—Å—å', 'error');
            console.warn('‚ö†Ô∏è –ó–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è, —Ä–∞–∑–º–µ—Ä:', audioBlob.size);
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebM –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
        await sendToServer(audioBlob);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏:', error);
        setStatus('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ', 'error');
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 */
async function sendToServer(audioBlob) {
    try {
        const formData = new FormData();
        formData.append('audio', audioBlob, 'recording.webm');

        setStatus('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...', 'processing');
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ WebM –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —Ä–∞–∑–º–µ—Ä:', audioBlob.size, '–±–∞–π—Ç');

        const response = await fetch('/api/dialog', {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        const data = await response.json();
        console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', data);

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç—ã
        userTextDiv.textContent = data.userText || '–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ';
        aiTextDiv.textContent = data.responseText || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞';

        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (data.audio) {
            playAudioResponse(data.audio);
        } else {
            console.log('‚ÑπÔ∏è –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –æ—Ç–∫–ª—é—á—ë–Ω');
        }

        setStatus('‚úÖ –ì–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', 'success');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        setStatus('–û—à–∏–±–∫–∞: ' + error.message, 'error');
        userTextDiv.textContent = '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏';
        aiTextDiv.textContent = error.message;
    }
}

/**
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–∞
 */
function playAudioResponse(base64Audio) {
    try {
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const binaryString = atob(base64Audio);
        const bytes = new Uint8Array(binaryString.length);
        for (let i = 0; i < binaryString.length; i++) {
            bytes[i] = binaryString.charCodeAt(i);
        }

        const audioBlob = new Blob([bytes], { type: 'audio/ogg' });
        const audioUrl = URL.createObjectURL(audioBlob);

        audioPlayer.src = audioUrl;
        audioPlayer.style.display = 'block';
        audioPlayer.play();

        console.log('üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞');

        // –û—á–∏—Å—Ç–∫–∞ URL –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        audioPlayer.onended = () => {
            URL.revokeObjectURL(audioUrl);
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–Ω–æ–ø–∫–∏
 */
recordButton.addEventListener('mousedown', startRecording);
recordButton.addEventListener('mouseup', stopRecording);
recordButton.addEventListener('mouseleave', () => {
    if (mediaRecorder && mediaRecorder.state === 'recording') {
        stopRecording();
    }
});

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ touch —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
recordButton.addEventListener('touchstart', (e) => {
    e.preventDefault();
    startRecording();
});

recordButton.addEventListener('touchend', (e) => {
    e.preventDefault();
    stopRecording();
});

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
window.addEventListener('load', async () => {
    setStatus('‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...', 'processing');

    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    await loadAudioDevices();
    await initMediaRecorder();
});
