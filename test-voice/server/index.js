import express from 'express';
import dotenv from 'dotenv';
import multer from 'multer';
import axios from 'axios';
import FormData from 'form-data';
import { getResponse } from './dialog.js';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import ffmpeg from 'fluent-ffmpeg';
import fs from 'fs/promises';
import { tmpdir } from 'os';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();
const upload = multer({ storage: multer.memoryStorage() });

const PORT = process.env.PORT || 3000;
const YANDEX_API_KEY = process.env.YANDEX_API_KEY;
const FOLDER_ID = process.env.FOLDER_ID;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!YANDEX_API_KEY || !FOLDER_ID) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω—ã YANDEX_API_KEY –∏–ª–∏ FOLDER_ID');
  console.error('üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example');
  console.error('üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: —Å–º. YANDEX_API_SETUP.md');
  process.exit(1);
}

// Middleware
app.use(express.json());
app.use(express.static(join(__dirname, '../public')));

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è WebM –≤ OGG Opus —á–µ—Ä–µ–∑ ffmpeg
 * @param {Buffer} webmBuffer - WebM –¥–∞–Ω–Ω—ã–µ
 * @returns {Promise<Buffer>} - OGG Opus –¥–∞–Ω–Ω—ã–µ
 */
async function convertWebMToOgg(webmBuffer) {
  const inputPath = join(tmpdir(), `input-${Date.now()}.webm`);
  const outputPath = join(tmpdir(), `output-${Date.now()}.ogg`);

  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º WebM –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    await fs.writeFile(inputPath, webmBuffer);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ffmpeg
    await new Promise((resolve, reject) => {
      ffmpeg(inputPath)
        .audioCodec('libopus')
        .format('ogg')
        .on('end', () => {
          console.log('‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è WebM ‚Üí OGG –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
          resolve();
        })
        .on('error', (err) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ ffmpeg:', err);
          reject(err);
        })
        .save(outputPath);
    });

    // –ß–∏—Ç–∞–µ–º OGG —Ñ–∞–π–ª
    const oggBuffer = await fs.readFile(outputPath);

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    await fs.unlink(inputPath);
    await fs.unlink(outputPath);

    return oggBuffer;

  } catch (error) {
    // Cleanup –ø—Ä–∏ –æ—à–∏–±–∫–µ
    try {
      await fs.unlink(inputPath).catch(() => {});
      await fs.unlink(outputPath).catch(() => {});
    } catch {}
    throw error;
  }
}

/**
 * POST /api/recognize
 * –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (Speech-to-Text)
 */
app.post('/api/recognize', upload.single('audio'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }

    console.log('üé§ –ü–æ–ª—É—á–µ–Ω WebM:', req.file.size, '–±–∞–π—Ç');

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º WebM –≤ OGG Opus
    console.log('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è WebM ‚Üí OGG...');
    const oggBuffer = await convertWebMToOgg(req.file.buffer);
    console.log('üì¶ –†–∞–∑–º–µ—Ä OGG:', oggBuffer.length, '–±–∞–π—Ç');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º OGG –∫–∞–∫ binary data (–∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    const response = await axios.post(
      `https://stt.api.cloud.yandex.net/speech/v1/stt:recognize` +
      `?folderId=${FOLDER_ID}&lang=ru-RU&format=oggopus`,
      oggBuffer,  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ binary!
      {
        headers: {
          'Authorization': `Api-Key ${YANDEX_API_KEY}`,
          'Content-Type': 'audio/ogg',
        },
        maxBodyLength: Infinity,
        maxContentLength: Infinity,
      }
    );

    const recognizedText = response.data.result || '';
    console.log('‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:', recognizedText);

    res.json({ text: recognizedText });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', error.response?.data || error.message);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏',
      details: error.response?.data || error.message
    });
  }
});

/**
 * POST /api/synthesize
 * –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ (Text-to-Speech)
 */
app.post('/api/synthesize', async (req, res) => {
  try {
    const { text } = req.body;

    if (!text) {
      return res.status(400).json({ error: '–¢–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }

    console.log('üîä –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º:', text);

    const response = await axios.post(
      'https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize',
      null,
      {
        headers: {
          'Authorization': `Api-Key ${YANDEX_API_KEY}`,
        },
        params: {
          text: text,
          lang: 'ru-RU',
          voice: 'alena',  // –ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å
          speed: 1.0,
          format: 'oggopus',
          folderId: FOLDER_ID,
        },
        responseType: 'arraybuffer'
      }
    );

    console.log('‚úÖ –°–∏–Ω—Ç–µ–∑ –∑–∞–≤–µ—Ä—à—ë–Ω');

    res.set('Content-Type', 'audio/ogg');
    res.send(Buffer.from(response.data));

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞:', error.response?.data || error.message);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏',
      details: error.message
    });
  }
});

/**
 * POST /api/dialog
 * –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ ‚Üí –ª–æ–≥–∏–∫–∞ ‚Üí —Å–∏–Ω—Ç–µ–∑
 */
app.post('/api/dialog', upload.single('audio'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }

    console.log('üí¨ –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞...');
    console.log('üì¶ –ü–æ–ª—É—á–µ–Ω WebM:', req.file.size, '–±–∞–π—Ç, mimetype:', req.file.mimetype);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º WebM –≤ OGG Opus
    console.log('‚è±Ô∏è [1/4] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è WebM ‚Üí OGG - –Ω–∞—á–∞–ª–æ');
    const convertStart = Date.now();
    const oggBuffer = await convertWebMToOgg(req.file.buffer);
    const convertTime = Date.now() - convertStart;
    console.log(`‚úÖ [1/4] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${convertTime}ms`);
    console.log('üì¶ –†–∞–∑–º–µ—Ä OGG:', oggBuffer.length, '–±–∞–π—Ç');

    // 1. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (STT) - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º OGG –∫–∞–∫ binary data
    console.log('‚è±Ô∏è [2/4] STT API - –Ω–∞—á–∞–ª–æ');
    const sttStart = Date.now();
    const sttResponse = await axios.post(
      `https://stt.api.cloud.yandex.net/speech/v1/stt:recognize` +
      `?folderId=${FOLDER_ID}&lang=ru-RU&format=oggopus`,
      oggBuffer,  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ binary!
      {
        headers: {
          'Authorization': `Api-Key ${YANDEX_API_KEY}`,
          'Content-Type': 'audio/ogg',
        },
        maxBodyLength: Infinity,
        maxContentLength: Infinity,
      }
    );
    const sttTime = Date.now() - sttStart;
    console.log(`‚úÖ [2/4] STT API –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${sttTime}ms`);

    const userText = sttResponse.data.result || '';
    console.log('üé§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª:', userText);

    // 2. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT (—Ç–µ–ø–µ—Ä—å async!)
    console.log('‚è±Ô∏è [3/4] YandexGPT API - –Ω–∞—á–∞–ª–æ');
    const gptStart = Date.now();
    const responseText = await getResponse(userText);
    const gptTime = Date.now() - gptStart;
    console.log(`‚úÖ [3/4] YandexGPT API –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${gptTime}ms`);
    console.log('ü§ñ –û—Ç–≤–µ—Ç:', responseText);

    // 3. –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ (TTS)
    console.log('‚è±Ô∏è [4/4] TTS API - –Ω–∞—á–∞–ª–æ');
    const ttsStart = Date.now();
    const ttsResponse = await axios.post(
      'https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize',
      null,
      {
        headers: {
          'Authorization': `Api-Key ${YANDEX_API_KEY}`,
        },
        params: {
          text: responseText,
          lang: 'ru-RU',
          voice: 'alena',
          speed: 1.0,
          format: 'oggopus',
          folderId: FOLDER_ID,
        },
        responseType: 'arraybuffer'
      }
    );
    const ttsTime = Date.now() - ttsStart;
    console.log(`‚úÖ [4/4] TTS API –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${ttsTime}ms`);

    const totalTime = convertTime + sttTime + gptTime + ttsTime;
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('üìä –ò–¢–û–ì–û:');
    console.log(`   –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: ${convertTime}ms (${(convertTime/totalTime*100).toFixed(1)}%)`);
    console.log(`   STT API:     ${sttTime}ms (${(sttTime/totalTime*100).toFixed(1)}%)`);
    console.log(`   GPT API:     ${gptTime}ms (${(gptTime/totalTime*100).toFixed(1)}%)`);
    console.log(`   TTS API:     ${ttsTime}ms (${(ttsTime/totalTime*100).toFixed(1)}%)`);
    console.log(`   –û–ë–©–ï–ï –í–†–ï–ú–Ø: ${totalTime}ms (${(totalTime/1000).toFixed(2)}s)`);
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

    // –ö–æ–¥–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ base64 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É
    const audioBase64 = Buffer.from(ttsResponse.data).toString('base64');

    res.json({
      userText,
      responseText,
      audio: audioBase64
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–ª–æ–≥–∞:', error.response?.data || error.message);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞',
      details: error.response?.data || error.message
    });
  }
});

app.listen(PORT, () => {
  console.log('üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:' + PORT);
  console.log('üìÅ –°—Ç–∞—Ç–∏–∫–∞: public/');
  console.log('üîë API Key:', YANDEX_API_KEY ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  console.log('üìÇ Folder ID:', FOLDER_ID ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
});
